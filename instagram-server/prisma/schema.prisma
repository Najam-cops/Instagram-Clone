// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  profileImage String?
  username  String   @unique
  password  String
  token     String?
  isPrivate  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  Likes     PostLike[]
  comments  PostComment[]
  followers Follows[] @relation("followers")
  following Follows[] @relation("following")
  requested FollowRequests[] @relation("requested")
  requester FollowRequests[] @relation("requester")
  blockedUsers Blocks[] @relation("blockedUsers")
  blcokedByUsers Blocks[] @relation("blockedByUsers")
  @@index([email, username])
}

model Follows {
  id        String   @id @default(cuid())
  follower      User     @relation("followers",fields: [followerId], references: [id])
  followerId    String
  following  User     @relation("following",fields: [followingId], references: [id])
  followingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model FollowRequests {
  id        String   @id @default(cuid())
  requester   User     @relation("requester",fields: [requesterId], references: [id])
  requesterId String
  requested   User     @relation("requested",fields: [requestedId], references: [id])
  requestedId String
  requestStatus RequestStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([requesterId, requestedId])
  @@index([requesterId])
  @@index([requestedId])
}

model Blocks {
  id        String   @id @default(cuid())
  blocker   User     @relation("blockedUsers",fields: [blockerId], references: [id])
  blockerId String
  blockedBy  User     @relation("blockedByUsers",fields: [blockedById], references: [id])
  blockedById String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([blockerId, blockedById])
  @@index([blockerId])
  @@index([blockedById])
}

model Post {
  id        String   @id @default(cuid())
  description String?
  images      PostImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Likes      PostLike[] @relation("likes")
  comments   PostComment[] @relation("comments")
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  @@index([userId])
}

model PostImage {
  id        String   @id @default(cuid())
  url       String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([postId])
}

model PostLike {
  id        String   @id @default(cuid())
  post      Post     @relation("likes",fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([postId])
  @@index([userId])
}

model PostComment {
  id        String   @id @default(cuid())
  comment   String
  post      Post     @relation("comments",fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([postId])
  @@index([userId])
}

model TokenBlacklist {
  id        String   @id @default(cuid())
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([token])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}